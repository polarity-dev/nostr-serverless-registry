AWSTemplateFormatVersion: 2010-09-09
Description: >
  This CloudFormation template creates a serverless architecture that can be used
  to implement the functionality specified in NIP-05 and NIP-35, which allow
  users to discover public keys and relays for internet identifiers.
  It consists of the following components:
  - An AWS Lambda function that handles requests to 
    https://<domain>/.well-known/nostr.json?name=<local-part> and returns a JSON
    document object with information about names and public keys.
  - An Amazon API Gateway that routes requests to the Lambda function.
  - An Amazon DynamoDB table that stores data about names, public keys, and relays.
  - An IAM role for the Lambda function that grants it the necessary permissions
    to access the DynamoDB table.
  - A log group for CloudWatch Logs that stores logs generated by the Lambda 
    function.

Parameters:
  certificateArn:
    Type: String

  domainName:
    Type: String

  hostedZoneId:
    Type: String

Resources:
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const { DynamoDB } = require("@aws-sdk/client-dynamodb")
          const client = new DynamoDB({ region: process.env.REGION })
          const TableName = process.env.TABLE

          const parseItems = (Items, data) => Items.forEach(({ name, publicKey, relays }) => {
            data.names[name.S] = publicKey.S
            if (Array.isArray(relays?.L)) {
              data.relays[publicKey.S] = relays.L.map(({ S }) => S)
            }
          })

          exports.handler = async ({ path, httpMethod, queryStringParameters}) => {
            if (httpMethod === "GET" && path === "/.well-known/nostr.json") {
              const data = { names: {}, relays: {}}
              
              if (queryStringParameters?.name) {
                const { Item } = await client.getItem({ TableName, Key: { name: { S: queryStringParameters.name } } })
                if (Item) {
                  parseItems([Item], data)
                }
              } else {
                let lastEvaluatedKey
                do {    
                  const { Items, LastEvaluatedKey } = await client.scan({ TableName, ExclusiveStartKey: lastEvaluatedKey })
                  lastEvaluatedKey = LastEvaluatedKey

                  parseItems(Items, data)
                } while (lastEvaluatedKey)
              }

              return {
                statusCode: 200,
                body: JSON.stringify(data),
                headers: {
                  "Access-Control-Allow-Origin" : "*",
                  "Access-Control-Allow-Credentials" : true
                }
              }
            } else {
              return {
                statusCode: 404,
                body: "Not found"
              }
            }
          }

      FunctionName: !Ref AWS::StackName
      Handler: index.handler
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: nodejs18.x
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          TABLE: !Ref AWS::StackName
      
  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}:*
          PolicyName: !Sub ${AWS::StackName}
      ManagedPolicyArns:
        - !Ref managedPolicy

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: 7

  managedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: DynamoDbSfInternal
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}"

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - EDGE
      Name: !Sub ${AWS::StackName}-apiGateway

  apiGatewayProxyResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      PathPart: "{proxy+}"

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations
      ResourceId: !Ref apiGatewayProxyResource
      RestApiId: !Ref apiGateway

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*

  apiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      CertificateArn: !Ref certificateArn
      DomainName: !Ref domainName
      SecurityPolicy: TLS_1_2

  apiMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      DomainName: !Ref apiDomainName
      Stage: !Ref apiGatewayStage
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: lambdaFunction
    Properties:
      RestApiId: !Ref apiGateway

  apiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: v1
      Description: v1
      RestApiId: !Ref apiGateway
      DeploymentId: !Ref apiGatewayDeployment
  
  route53RecordSetGroup:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref domainName
      Type: A
      HostedZoneId: !Ref hostedZoneId
      AliasTarget:
        DNSName: !GetAtt apiDomainName.DistributionDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt apiDomainName.DistributionHostedZoneId  

  dynamoDb:  
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "name"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "name"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "1"
      TableName: !Sub ${AWS::StackName}

Outputs:
  wellKnownEndpoint:
    Value: !Sub https://${domainName}/.well-known/nostr.json